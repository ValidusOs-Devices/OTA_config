====================
     02-18-2017
====================


   * build/
a4e918dbf update ota_from_target

   * frameworks/base/
1b7f270edbf Day/Night onthego vector

   * kernel/moto/shamu/
69462cdc308 HC b1-711
c58da2c421a Merge remote-tracking branch 'hell/nougat-mr1.5' into testing
d7c0cf18b16 ARM: 8287/1: add bitrev.h file to support rbit instruction
00dda60c59f ARM: 8187/1: add CONFIG_HAVE_ARCH_BITREVERSE to support rbit instruction
c3bdc6d4544 zlib_deflate/deftree: remove bi_reverse()
e7682c333fd zlib: clean up some dead code
b7360d61beb lib/is_single_threaded.c: change current_is_single_threaded() to use for_each_thread()
89e9d824537 lib: find_*_bit reimplementation
2a4004068d1 lib: make memzero_explicit more robust against dead store  elimination
ee8945861e9 idr: reorder the fields
819b0d498ec idr: remove unused prototype of idr_free()
bece9db9d0b lib/idr.c: fix out-of-bounds pointer dereference
83454f7516b idr: reduce the unneeded check in free_layer()
7c6fe92bd34 idr: don't need to shink the free list when idr_remove()
3e1045a75c6 idr: fix idr_replace()'s returned error code
e7e17e1e840 idr: fix NULL pointer dereference when ida_remove(unallocated_id)
d42248c7c4f idr: fix unexpected ID-removal when idr_remove(unallocated_id)
8cda8828a04 lib/idr.c: use RCU_INIT_POINTER(x, NULL)
4a0cc2fdca3 idr: remove dead code
14253545654 idr: Add new function idr_is_empty()
40215a5306d idr: print a stack dump after ida_remove warning
a98abc6b95a usb: use %*pb[l] to print bitmaps including cpumasks and nodemasks
c5c6881a089 scsi: use %*pb[l] to print bitmaps including cpumasks and nodemasks
f8d017b3ead net: use %*pb[l] to print bitmaps including cpumasks and nodemasks
cda1d6cd758 workqueue: use %*pb[l] to format bitmaps including cpumasks and nodemasks
97a335830c3 percpu: use %*pb[l] to print bitmaps including cpumasks and nodemasks
d7a48e60645 drivers/base: use %*pb[l] to print bitmaps including cpumasks and nodemasks
842247a823c input: use %*pb[l] to print bitmaps including cpumasks and nodemasks
5f08d5f8116 lib/vsprintf: implement bitmap printing through '%*pb[l]'
57021bfa82c lib/bitmap.c: Clean up deprecated defines
2c14d0fe32b lib: bitmap: remove redundant code from __bitmap_shift_left
c5cf7afc6cc lib: bitmap: eliminate branch in __bitmap_shift_left
e6f3761e50e lib: bitmap: yet another simplification in __bitmap_shift_right
8b04f221cb1 lib: bitmap: remove redundant code from __bitmap_shift_right
535551889d9 lib: bitmap: eliminate branch in __bitmap_shift_right
60e5277dd65 lib/bitmap.c: elide bitmap_copy_le on little-endian
1e25664b2e7 lib/bitmap.c: change prototype of bitmap_copy_le
794d3862c47 lib: bitmap: change bitmap_shift_left to take unsigned parameters
3847c992002 lib: bitmap: change bitmap_shift_right to take unsigned parameters
814df9362ec linux/bitmap: Force inlining of bitmap weight functions
e23d3ba7495 lib/bitmap.c: bitmap_[empty,full]: remove code duplication
65467fc5ea4 linux/bitmap.h: improve BITMAP_{LAST,FIRST}_WORD_MASK
e9973868cf4 lib: add glibc style strchrnul() variant
7985e5f6a1e lib/bitmap.c: bitmap_parselist can accept string with whitespaces on head or tail
9f589ce51c3 lib/bitmap.c: fix a special string handling bug in __bitmap_parselist
07a260117e3 lib/bitmap.c: correct a code style and do some, optimization
66c1c5b3a18 lib/bitmap.c: simplify bitmap_pos_to_ord
74d04988278 lib/bitmap.c: make the bits parameter of bitmap_remap unsigned
a7035a74cba lib/bitmap.c: simplify bitmap_ord_to_pos
65c942f07eb lib/bitmap.c: change parameters of bitmap_fold to unsigned
0b1aaf4debf lib/bitmap.c: update bitmap_onto to unsigned
dbda72b6a47 lib/bitmap.c: more signed->unsigned conversions
59d9214cbff lib: bitmap: add missing mask in bitmap_shift_right
200ad70dbc2 lib: bitmap: add missing mask in bitmap_andnot
f9f1460ae51 lib: bitmap: add missing mask in bitmap_and
f07e309733f lib: bitmap: micro-optimize bitmap_allocate_region
8a5ac4f2e50 lib: bitmap: change parameter of bitmap_*_region to unsigned
589caa508c7 lib: bitmap: fix typo in kerneldoc for bitmap_pos_to_ord
eb70598f978 lib: bitmap: simplify bitmap_parselist
9cd56f33356 lib: bitmap: make the start index of bitmap_clear unsigned
60b9b4a4ada lib: bitmap: make the start index of bitmap_set unsigned
3caa4db0e1f lib: bitmap: make nbits parameter of bitmap_weight unsigned
47ccb34fea0 lib: bitmap: make nbits parameter of bitmap_subset unsigned
2be04be868b lib: bitmap: make nbits parameter of bitmap_intersects unsigned
3c4ff8cf4ef lib: bitmap: make nbits parameter of bitmap_{and,or,xor,andnot} unsigned
29a138e6892 lib: bitmap: remove unnecessary mask from bitmap_complement
b6f0d22be7b lib: bitmap: make nbits parameter of bitmap_complement unsigned
794aebea2d5 lib: bitmap: make nbits parameter of bitmap_equal unsigned
ea34f79f7d9 lib: bitmap: make nbits parameter of bitmap_full unsigned
0c406e0c2a5 lib: bitmap: make nbits parameter of bitmap_empty unsigned
f5c916b487f cpumask, nodemask: implement cpumask/nodemask_pr_args()
9f9f9492f85 linux/nodemask.h: update bitmap wrappers to take unsigned int
e2f6e480f5b numa: Mark __node_set() as __always_inline
b1f60461d2b futex: Remove bogus hrtimer_active() check
f71bd7871ff locking/rtmutex: Update stale plist comments
1e59743ece1 locking/rtmutex: Drop usage of __HAVE_ARCH_CMPXCHG
dc5c95e306b futex: Lower the lock contention on the HB lock during wake up
bf27f772579 locking/rtmutex: Implement lockless top-waiter wakeup
45878735449 futex: Implement lockless wakeups
7881cefbd5f sched: Implement lockless wake-queues
a099411eb92 locking/rtmutex: Set state back to running on error
45c37a2e11d locking/rtmutex: Avoid a NULL pointer dereference on deadlock
fb590d768ff locking/rtmutex: Optimize setting task running after being blocked
91bde106fae mutexes: Give more informative mutex warning in the !lock->owner case
ed084979c10 rtmutex: Avoid pointless requeueing in the deadlock detection chain walk
fe687046038 rtmutex: Cleanup deadlock detector debug logic
0c034cd014a rtmutex: Confine deadlock logic to futex
3ee0decf0e0 rtmutex: Simplify remove_waiter()
af17029c1a2 rtmutex: Document pi chain walk
1883afe207f rtmutex: turn the plist into an rb-tree.
998dfb9c89d rtmutex: Clarify the boost/deboost part

   * manifest/
9b69ecc Track 6.x for shamu kernel

   * system/core/
1c90fe088 Create "theme extras" directory

   * system/sepolicy/
cf4ad456 sepolicy: fix themed sounds
6d9a4335 sepolicy: fix themed boot animation
523ab1e0 Introduce sepolicy exceptions for theme assets

====================
     02-17-2017
====================

   * OTA_config/
c74000b Update ValidusOTA.xml
e506088 bullhead

   * packages/apps/masquerade/
69f78e9 Release 23: Introduce the rootless solution for Masquerade [3/3]
8e7d96b Finalize masquerade rootless functionality with Substratum [2/3]
85638ac Rewrite Masquerade for UID system ops [1/3]

====================
     02-16-2017
====================


   * frameworks/base/
45490b1753a OnTheGo: Use better vector image
e31e690a63d SystemUI: grant PACKAGE_USAGE_STATS permission for DUI [1/2]

   * kernel/moto/shamu/
13d6f9dbb5e build: b1-711
3ccaf0e333b hells_defconfig: Refresh
f3ca4e6a9b1 mm, slub: fix some indenting in cmpxchg_double_slab()
ab475eeef79 mm: slub: SLUB_DEBUG=n: use the same alloc/free hooks as for SLUB_DEBUG=y
0560ccb08a1 slub: use new node functions
397c8838d49 mm: slub: share object_err function
6889a6eadc7 slub: use %*pb[l] to print bitmaps including cpumasks and nodemasks
8f49dfe2b1b slab: fix for_each_kmem_cache_node()
fad134d318e slab: convert last use of __FUNCTION__ to __func__
810ebf9e627 mm: slab.h: wrap the whole file with guarding macro
bcb92a59a82 slab common: add functions for kmem_cache_node access
1d01e9c1bc3 slab: improve checking for invalid gfp_flags
b4a83b4dddd mm/slab_common: allow NULL cache pointer in  kmem_cache_destroy()
37064686523 mm/slub: fix slab double-free in case of duplicate sysfs filename
6038bbbbe59 slab: fix wrong retval on kmem_cache_create_memcg error path
a7d49e4f894 hells_defconfig: Enable SLUB_CPU_PARTIAL
ffce8ea0cbd slab: do not panic if we fail to create memcg cache
1a6552c404c memcg, slab: kmem_cache_create_memcg(): fix memleak on fail path
22c3855d22f slab: clean up kmem_cache_create_memcg() error handling
b360c00b7e1 mm/slab: Give s_next and s_stop slab-specific names
f4f11b386a1 mm/slab: Fix /proc/slabinfo unwriteable for slab
93201336786 mm/slab: Sharing s_next and s_stop between slab and slub
10cac8b0add topology: add support for node_to_mem_node() to determine the fallback node
4bab4f93e9c slub: fall back to node_to_mem_node() node if allocating on memoryless node
b3fd4f31bfb slub: disable tracing and failslab for merged slabs
c4e8ba377ee slub: remove kmemcg id from create_unique_id
3a51552dab4 slab: fix the alias count (via sysfs) of slab cache
b0be58c88dd slub: avoid duplicate creation on the first object
62c85314fb9 mm, slub: mark resiliency_test as init text
476cb836941 slub: fix off by one in number of slab tests
abea72a1790 slub: search partial list on numa_mem_id(), instead of numa_node_id()
31868080129 mm, slab_common: add 'unlikely' to size check of kmalloc_slab()
a9882e33419 mm: slub: fix ALLOC_SLOWPATH stat
fc8b12c1bd7 mm, slab: suppress out of memory warning unless debug is enabled
2223b8aaf4f mm/slub.c: convert vnsprintf-static to va_format
1e8bb11a148 mm/slub.c: convert printk to pr_foo()
6b0a3801bb6 mm, slub: fix the typo in include/linux/slub_def.h
4e0f2abbd03 slub: remove verify_mem_not_deleted()
4491284b6b3 slub: fix memcg_propagate_slab_attrs
4f568dd75db slub: use raw_cpu_inc for incrementing statistics
d8107000355 slub: fix leak of 'name' in sysfs_slab_add
1f39edd0fe9 slub: rework sysfs layout for memcg caches
5e7c00b0edc slub: adjust memcg caches when creating cache alias
181952165db memcg, slab: never try to merge memcg caches
3da9b1fd012 slub: do not drop slab_mutex for sysfs_slab_add
52bb8dc8bc2 slub: fix high order page allocation problem with __GFP_NOFAIL
c270c78c0ca slub: do not assert not having lock in removing freed partial
03d4ed9c435 mm/slub.c: list_lock may not be held in some circumstances
761f2e147b6 mm: slub: work around unneeded lockdep warning
695bf340443 mm/slub.c: fix page->_count corruption (again)
2f14c6d8e64 slub: Fix possible format string bug.
8ea068a5655 slub: use lockdep_assert_held
67606f4fe43 memcg, kmem: rename cache_from_memcg to cache_from_memcg_idx
e5bc21d4bc0 mm, slub: fix the typo in mm/slub.c
117f765d870 slub: proper kmemleak tracking if CONFIG_SLUB_DEBUG disabled
56184fa5897 mm: Fix some trivial typos in comments
9759801c9b1 mm: replace strict_strtoul() with kstrtoul()
eca0529b8af mm/slub.c: beautify code for removing redundancy 'break' statement.
138060cd48c slub: Remove unnecessary page NULL check
1b49738e88e Revert "slub: do not put a slab to cpu partial list when cpu_partial is 0"
977ebae42f2 mm/slub: beautify code for 80 column limitation and tab alignment
7585965e088 mm/slub: remove 'per_cpu' which is useless variable
301ec8d6447 slub: Check for page NULL before doing the node_match check
bae6bcb25d7 slub: Make cpu partial slab support configurable
c349cfcfc4e slub: do not put a slab to cpu partial list when cpu_partial is 0
714e490c7d4 mm/slub: Use node_nr_slabs and node_nr_objs in get_slabinfo
a78e53e485e mm/slub: Drop unnecessary nr_partials
f2e5ea021fe ASoC: wcd9xxx: Avoid micbias glitches during audio playback During audio playback over headset, micbias output is switched to vddio and it's parameters are programmed so that it will do button polling with a voltage equal to vddio (1.8v). It is observed that during this polling interval there is a drop in micbias voltage which would cause issues with button press. Avoid this voltage drop by disabling mbhc micbias when vddio switch is enabled.
cb660b08b39 ASoC: wcd9320: Change headphone CnP settings
9af2fc007b0 UPSTREAM: binfmt_elf: add ELF_HWCAP2 to compat auxv entries
57066d11a42 lib: align source before using optimized implementation
44734b09e28 hells_defconfig: Refresh
cf69fbe4431 msm: msm_bus: Prevent unexpected result with radix-tree usage
52320965e62 ARM: 7789/1: Do not run dummy_flush_tlb_a15_erratum() on non-Cortex-A15
92a9bc7e36e ARM: mm: Skip I-cache invalidate for Cortex-A15 boot
ed412f1f17a ARM: mm: Remove unnecessary CMO in Cortex A15 startup
5f67c3eaa87 ARM: fix csum_tcpudp_magic() miscompilation
c4aaa87c118 ARM: cache-v7: use movw/movt instructions
44cb0066472 ARM: smp_on_up: move inline asm ALT_SMP patching macro out of spinlock.h
48276aa4c19 ARM: locks: prefetch the destination word for write prior to strex
c077be714b6 ARM: prefetch: add support for prefetchw using pldw on SMP ARMv7+ CPUs
da2e5d6208c ARM: 7992/1: boot: compressed: ignore bswapsdi2.S
2393a08a097 ARM: 7990/1: asm: rename logical shift macros push pull into lspush lspull
ffc93e82af8 ARM: 7984/1: prefetch: add prefetchw invocations for barriered atomics
9e56114ea1d ARM: 7877/1: use built-in byte swap function
b34394098ca ASoC: msm: qdsp6v2: add error handling on write done during partial drain
27658b6c1ed ARM: 7983/1: atomics: implement a better __atomic_add_unless for v6+
d0932336e6e ARM: 7868/1: arm/arm64: remove atomic_clear_mask() in "include/asm/atomic.h"
73952643450 ARM: convert all "mov.* pc, reg" to "bx reg" for ARMv6+
9573eca2707 ARM: 7867/1: include: asm: use 'int' instead of 'unsigned long' for 'oldval' in atomic_cmpxchg().
5337c6fd3c9 ARM: 7866/1: include: asm: use 'long long' instead of 'u64' within atomic.h
4501f960701 Revert "audit: Mute userspace and kernel audit logs"
10ef1d8cc2a Revert "jiffies conversions: Use compile time constants when possible"
86fe1532d58 hells_defconfig: Enable ANDROID_LMK_ADJ_RBTREE
d19b27a35e2 android: lowmemorykiller: squash task adj rbtree optimization from Motorola
2783547d60b ASoC: wcd9xxx: Changes for High performance mode Add changes for high performance audio playback on headset for better audio quality during 192KHz/24bit audio playback. Other updates from Moto apq8084
4106a02a203 ASoC: Avoid wrong map/unmap of ocmem
210bb72f1cf bluetooth: Fix SCO connection synchronization.
3ca9cc0ed42 bluetooth: Configure DUT as MASTER for outgoing connection requests
286837a7020 BLUETOOTH: Add NULL Check for pointer
9835847a702 bluetooth: Send HCI RESET during BT OFF
cccfaed6e3b ASoC: compress: fix memory corruption case
be3d9203807 Bluetooth: Fix crash in l2cap_chan_send after l2cap_chan_del
30800638a52 Bluetooth: change cancel_delayed_work to cancel_delayed_work_sync
abe9cdd8203 ASoC: msm: qdsp6v2: add support for any number of ASM buffers
381e390290f hells_defconfig: Enable HAVE_ARCH_BITREVERSE
6352f86e2bd lib/sort: Add 64 bit swap function
18129f2502c lib/sort.c: move include inside #if 0
2c509b73716 lib/sort.c: use simpler includes
dce7d767598 lib/genalloc.c: check result of devres_alloc()
2771bc0750b lib/genalloc.c: remove redundant include
18cf9a93f97 genalloc: fix device node resource counter
8d924094b1f lib: radix_tree: tree node interface
1848b3a34ed mm: filemap: move radix tree hole searching here
3e581d6a077 Page cache miss tracing using ftrace on mm/filemap
b695aa949a5 lib: radix-tree: add radix_tree_delete_item()
1db457408ef lib/radix-tree.c: swapoff tmpfs radix_tree: remember to rcu_read_unlock
72670bea435 lib/radix-tree.c: make radix_tree_node_alloc() work correctly within interrupt
bcee1a82c5a lib/md5.c: simplify include
a1ddc261333 lib: list_sort.c: Limit number of unused cmp callbacks
dd45a6df53a crypto: LLVMLinux: Remove VLAIS usage from libcrc32c.c
f5782c42621 crypto: LLVMLinux: Add macro to remove use of VLAIS in crypto code
ba47dfe05fb lib/lcm.c: lcm(n,0)=lcm(0,n) is 0, not n
8430467ffa0 lib/lcm.c: ensure correct result whenever it fits
8a9bb777bae kfifo: use BUG_ON
8b9c5877c69 kfifo: kfifo_copy_{to,from}_user: fix copied bytes calculation
0b8e1391375 lib/halfmd4.c: use rol32 inline function in the ROUND macro
e6dfbd61b12 lib/halfmd4.c: simplify includes
67712398bb8 lib/digsig.c: kernel-doc warning fixes
c2f1fff6487 lib/digsig.c: use ERR_CAST inlined function instead of ERR_PTR(PTR_ERR(...))
c672d348d0b lib/decompress_unlzma: Do a NULL check for pointer
36377de8bcb lib/decompress_inflate.c: include appropriate header file
c207c88c0a7 lib/decompress: set the compressor name to NULL on error
bddb9da417c lib/decompress.c: consistency of compress formats for kernel image
9835a90aa42 net/sctp: Refactor SCTP skb checksum computation
ad1a0f7f875 net: sctp: prevent checksum.h from double inclusion
76dc8a48a4e lib/crc7: Shift crc7() output left 1 bit
ba948571c0d lib: crc32: Add some additional __pure annotations
595d0fa18fa lib: crc32: Mark test data __initconst
e548538f50e lib: crc32: Greatly shrink CRC combining code
4357e574219 lib/crc32.c: remove unnecessary __constant
adf95f5106b lib: crc32: reduce number of cases for crc32{, c}_combine
43c44b862fc lib: crc32: conditionally resched when running testcases
4540fa25e91 lib: crc32: add test cases for crc32{, c}_combine routines
b02706461b5 lib: crc32: add functionality to combine two crc32{, c}s in GF(2)
e21b2cf9495 lib: crc32: clean up spacing in test cases
29799cc4e08 lib/crc32: update the comments of crc32_{be,le}_generic()
ca88d8263c4 ARM: 8287/1: add bitrev.h file to support rbit instruction
1b5a0f91c75 ARM: 8187/1: add CONFIG_HAVE_ARCH_BITREVERSE to support rbit instruction
75a01c2e5ec zlib_deflate/deftree: remove bi_reverse()
36e0622127f zlib: clean up some dead code
506a67b1ef6 lib/is_single_threaded.c: change current_is_single_threaded() to use for_each_thread()
a1424d8058a lib: find_*_bit reimplementation
5194eb6d62b lib: make memzero_explicit more robust against dead store  elimination
e955b3c0f4d idr: reorder the fields
32a19fe2a74 idr: remove unused prototype of idr_free()
94cc477e23b lib/idr.c: fix out-of-bounds pointer dereference
ecdc0810be4 idr: reduce the unneeded check in free_layer()
3678b22d444 idr: don't need to shink the free list when idr_remove()
1b7a2621642 idr: fix idr_replace()'s returned error code
28081bfbb2f idr: fix NULL pointer dereference when ida_remove(unallocated_id)
5f1687f65db idr: fix unexpected ID-removal when idr_remove(unallocated_id)
6bcb8c7f7a6 lib/idr.c: use RCU_INIT_POINTER(x, NULL)
1d0d49176c7 idr: remove dead code
faa4d6348d4 idr: Add new function idr_is_empty()
7b059cc5e50 idr: print a stack dump after ida_remove warning
3599c7138a1 usb: use %*pb[l] to print bitmaps including cpumasks and nodemasks
1df7f0b0be1 scsi: use %*pb[l] to print bitmaps including cpumasks and nodemasks
de1743faaac net: use %*pb[l] to print bitmaps including cpumasks and nodemasks
f23f7619162 workqueue: use %*pb[l] to format bitmaps including cpumasks and nodemasks
5876dd24fb3 percpu: use %*pb[l] to print bitmaps including cpumasks and nodemasks
86b152a8340 sched: use %*pb[l] to print bitmaps including cpumasks and nodemasks
46bb72b309b drivers/base: use %*pb[l] to print bitmaps including cpumasks and nodemasks
a09f26b99bc input: use %*pb[l] to print bitmaps including cpumasks and nodemasks
68c1131d11b lib/vsprintf: implement bitmap printing through '%*pb[l]'
e6a1c29f12e lib/bitmap.c: Clean up deprecated defines
b6c3d43bbe1 lib: bitmap: remove redundant code from __bitmap_shift_left
243b182c6ad lib: bitmap: eliminate branch in __bitmap_shift_left
4f888949296 lib: bitmap: yet another simplification in __bitmap_shift_right
d46b54d9d83 lib: bitmap: remove redundant code from __bitmap_shift_right
3b2c66c5bde lib: bitmap: eliminate branch in __bitmap_shift_right
3aa75c28ff6 lib/bitmap.c: elide bitmap_copy_le on little-endian
00269460039 lib/bitmap.c: change prototype of bitmap_copy_le
d7dfa5b4215 lib: bitmap: change bitmap_shift_left to take unsigned parameters
6cac25e06da lib: bitmap: change bitmap_shift_right to take unsigned parameters
9486fce2beb linux/bitmap: Force inlining of bitmap weight functions
300fd31d9ad lib/bitmap.c: bitmap_[empty,full]: remove code duplication
0221e0050bf linux/bitmap.h: improve BITMAP_{LAST,FIRST}_WORD_MASK
47b88678211 lib: add glibc style strchrnul() variant
5a52758ee8a lib/bitmap.c: bitmap_parselist can accept string with whitespaces on head or tail
51cfd46ebea lib/bitmap.c: fix a special string handling bug in __bitmap_parselist
bfeea16f632 lib/bitmap.c: correct a code style and do some, optimization
4e4c1eb5a21 lib/bitmap.c: simplify bitmap_pos_to_ord
825737f7dbb lib/bitmap.c: make the bits parameter of bitmap_remap unsigned
2b75e7e8c64 lib/bitmap.c: simplify bitmap_ord_to_pos
42d8c7e311a lib/bitmap.c: change parameters of bitmap_fold to unsigned
bc2ace1b919 lib/bitmap.c: update bitmap_onto to unsigned
8cd0d853d47 lib/bitmap.c: more signed->unsigned conversions
c9a1d7c1d09 lib: bitmap: add missing mask in bitmap_shift_right
bbd16e9acf9 lib: bitmap: add missing mask in bitmap_andnot
597e06b026a lib: bitmap: add missing mask in bitmap_and
2b9d99ba07f lib: bitmap: micro-optimize bitmap_allocate_region
b090ce42c58 lib: bitmap: change parameter of bitmap_*_region to unsigned
0839e47200d lib: bitmap: fix typo in kerneldoc for bitmap_pos_to_ord
2b49759d24a lib: bitmap: simplify bitmap_parselist
a712f9bf9bc lib: bitmap: make the start index of bitmap_clear unsigned
4895e1531bb lib: bitmap: make the start index of bitmap_set unsigned
b37d0185ceb lib: bitmap: make nbits parameter of bitmap_weight unsigned
a763158ce09 lib: bitmap: make nbits parameter of bitmap_subset unsigned
cb2ee8a02d6 lib: bitmap: make nbits parameter of bitmap_intersects unsigned
55dafea1c5f lib: bitmap: make nbits parameter of bitmap_{and,or,xor,andnot} unsigned
51be73d3a09 lib: bitmap: remove unnecessary mask from bitmap_complement
b4e182d5b04 lib: bitmap: make nbits parameter of bitmap_complement unsigned
23daf7153b3 lib: bitmap: make nbits parameter of bitmap_equal unsigned
66378eb59dd lib: bitmap: make nbits parameter of bitmap_full unsigned
7e9f3bba49b lib: bitmap: make nbits parameter of bitmap_empty unsigned
44448daa722 cpumask, nodemask: implement cpumask/nodemask_pr_args()
fa159c3b508 linux/nodemask.h: update bitmap wrappers to take unsigned int
9316f472693 numa: Mark __node_set() as __always_inline
136449a2188 futex: Remove bogus hrtimer_active() check
f3b69cf71cc locking/rtmutex: Update stale plist comments
a9e99ab2c81 locking/rtmutex: Drop usage of __HAVE_ARCH_CMPXCHG
707b898b66e futex: Lower the lock contention on the HB lock during wake up
aa1d75252dc locking/rtmutex: Implement lockless top-waiter wakeup
4e24a71e57f futex: Implement lockless wakeups
a62983628c7 sched: Implement lockless wake-queues
2a4f544f1a1 locking/rtmutex: Set state back to running on error
ed06537a3e0 locking/rtmutex: Avoid a NULL pointer dereference on deadlock
24f0a78cde7 locking/rtmutex: Optimize setting task running after being blocked
337395e2ecb mutexes: Give more informative mutex warning in the !lock->owner case
9bbcf6c5657 rtmutex: Avoid pointless requeueing in the deadlock detection chain walk
d0dbbb1440b rtmutex: Cleanup deadlock detector debug logic
1317a2dd813 rtmutex: Confine deadlock logic to futex
adaf6d8e0b0 rtmutex: Simplify remove_waiter()
06b44c0705f rtmutex: Document pi chain walk
0c1c2b08c85 rtmutex: turn the plist into an rb-tree.
68792063e11 rtmutex: No need to keep task ref for lock owner check
969ea5733f4 rtmutex: Clarify the boost/deboost part
663f59d49b3 rtmutex: Simplify and document try_to_take_rtmutex()
6b841d81334 rtmutex: Simplify rtmutex_slowtrylock()
f405d3277bb locking/doc: Update references to kernel/mutex.c
fe01a67a10b locking: Move the percpu-rwsem code to kernel/locking/
6069d962b20 locking: Move the lglocks code to kernel/locking/
16f09cf8545 locking: Move the rwsem code to kernel/locking/
d3b07435598 locking: Move the rtmutex code to kernel/locking/
46a619986f3 locking: Move the semaphore core to kernel/locking/
813847570dd locking: Move the spinlock code to kernel/locking/
32dacd4a2de locking: Move the lockdep code to kernel/locking/
464a40aaa83 locking: Move the mutex code to kernel/locking/
44167fb6a34 lglock: Update lockdep annotations to report recursive local locks
3d67aed7c80 lockdep: Introduce lock_acquire_exclusive()/shared() helper macros
1f1b20c9b9b kernel/spinlock.c: add default arch_*_relax definitions for GENERIC_LOCKBREAK
6762e02f3cc mutex: Avoid label warning when !CONFIG_MUTEX_SPIN_ON_OWNER
5fc48b1b02e mutex: Avoid gcc version dependent __builtin_constant_p() usage
d7d302d8cc2 mutex: Fix w/w mutex deadlock injection
3b459f39fbe mutex: Do not unnecessarily deal with waiters
e8569b597ce mutex: Fix/document access-once assumption in mutex_can_spin_on_owner()
d9877ee3b66 mutex: Move ww_mutex definitions to ww_mutex.h
d7255884d60 mutex: Add w/w mutex slowpath debugging
3ce1d518f52 mutex: Add support for wound/wait style locks
461c59adc74 arch: Make __mutex_fastpath_lock_retval return whether fastpath succeeded or not
1946dfeb642 rtmutex: Plug slow unlock race
5da3921ea40 rtmutex: Handle deadlock detection smarter
19e9d0a3933 rtmutex: Detect changes in the pi lock chain
f0d916eced3 rtmutex: Fix deadlock detector for real
08e00da3cd8 futex-prevent-requeue-pi-on-same-futex.patch futex: Forbid uaddr == u…
7a0b6beae7a futex: Prevent attaching to kernel threads
f4ba41a7d26 futex: Add another early deadlock detection check
fb41b5fe046 arm: idle: add missing need_resched check
4ad61d6b0ff cpuidle: kick all cpu after idle handler installed
165b77a9668 ACPI / cpuidle: fix deadlock between cpuidle_lock and cpu_hotplug.lock
dcc62186caf Sched/Cpuidle: Merge Arm/Qcom Patches
d12de7674d9 sched/idle: Move cpu/idle.c to sched/idle.c
028e2700f47 cgroup: make serial_nr_cursor available throughout cgroup.c
8403631793a cgroup: fix memory leak in cgroup_rm_cftypes()
fbced5458f0 cgroup: add cgroup->serial_nr and implement cgroup_next_sibling()
71979e4b928 cgroup: make cgroup_is_removed() static
3f8e80ba9eb cgroup: implement task_cgroup_path_from_hierarchy()
a0ddd908bf7 cgroup: make hierarchy_id use cyclic idr
4fd463850dc cgroup: drop hierarchy_id_lock
f33fef8a2df cgroup: refactor hierarchy_id handling
ef16d70da8c hells_defconfig: Refresh
9f15c96236d PM / freezer: Clean up code after recent fixes
6491d94c3fb PM / sleep: Mechanism for aborting system suspends unconditionally
f82a4c23a63 PM / Sleep: Remove ftrace_stop/start() from suspend and hibernate
369df4b5283 PM / sleep: fix freeze_ops NULL pointer dereferences
da1a3e08988 ACPI / PM: Hold ACPI scan lock over the "freeze" sleep state
c9549109dad PM / suspend: Make cpuidle work in the "freeze" state
400e0f4f1b2 PM: Add missing "freeze" state
cff4013cb29 PM / suspend: Remove unnecessary !!
776d59e77ec PM / wakeup: Include appropriate header file in kernel/power/wakelock.c
cab9f2f0fa8 PM / sleep: Move prototype declaration to header file kernel/power/power.h
fe4d2a92ad7 mm: use totalram_pages instead of num_physpages at runtime
36e7aa21415 arm, pm, vmpressure: add missing slab.h includes
1e74c0abb71 PM / sleep: Fix memory leak in pm_vt_switch_unregister().
538b55f276d mm: use zone_end_pfn() instead of zone_start_pfn+spanned_pages
449cd286cbc PM / hibernate / memory hotplug: Rework mutual exclusion
d1a525915c2 PM / hibernate: Create memory bitmaps after freezing user space
5b9febcc5e2 PM / Sleep: increase ftrace coverage in suspend/resume
96b62414019 block: check for timeout function in blk_rq_timed_out()
cd5f26e68f9 block: Substitute rcu_access_pointer() for rcu_dereference_raw()
805e7354457 block: Use macros from compiler.h instead of __attribute__((...))
683a9f47ef8 cpufreq: unlock when failing cpufreq_update_policy()
27458a388de cpufreq: Add stop CPU callback to cpufreq_driver interface
45c3cc067e4 cpufreq: remove unused notifier: CPUFREQ_{SUSPENDCHANGE|RESUMECHANGE}
c64f99bc74d cputime: Default implementation of nsecs -> cputime conversion
7bd9a732b45 cpufreq: Do not allow ->setpolicy drivers to provide ->target
a890c0b180f cpufreq: Fix a merge mistake
80542352b5d cpufreq: Return error if ->get() failed in cpufreq_update_policy()
113ca04783c cpufreq: don't call cpufreq_update_policy() on CPU addition
2d02990d908 cpufreq: Refactor cpufreq_set_policy()
69b514ffb17 include/linux/sched.h: don't use task->pid/tgid in same_thread_group/has_group_leader_pid
a124f9c5a8b Dont compile Ladder CpuIdle Gov. We Don't Need It
4822007bfc7 cpuidle: Replace strnicmp with strncasecmp
da56cc41d7c drivers/cpuidle: Replace __get_cpu_var uses for address calculation
17c2e8430d2 cpuidle: menu: Call nr_iowait_cpu less times
e3ff614de38 cpuidle: menu: Use ktime_to_us instead of reinventing the wheel
ad4e6de6cd7 cpuidle: menu: Use shifts when calculating averages where possible
f683a9c1393 cpuidle: Remove time measurement in poll state
40a2da68e2d cpuidle: Remove manual selection of the multiple driver support
72d0ea030ea cpuidle: ladder governor - use macro instead of hardcoded value
2b047f81d9f cpuidle: menu governor - remove unused macro STDDEV_THRESH
0a81635f36e cpuidle: fix permission for driver name sysfs node
b0355cd652b cpuidle: fix comment
3fcc1b6ecce cpuidle: Set polling in poll_idle
b7e22b65a0f cpuidle / menu: move repeated correction factor check to init
e5aff916668 cpuidle: sysfs: Export target residency information
fb8001be68b cpuidle: delay enabling interrupts until all coupled CPUs leave idle
cfcaf75729e idle/cpuidle: Split cpuidle_idle_call main function into smaller functions
1c4974c0ba9 cpuidle: poll state can measure residency
98d8756d2cc cpuidle: Move perf multiplier calculation out of the selection loop
837cd7f4deb cpuidle: Do not substract exit latency from assumed sleep length
2b93dcf2628 cpuidle: Ensure menu coefficients stay within domain
c0ac9017451 cpuidle: Use actual state latency in menu governor
c820755fe8b cpuidle: rename expected_us to next_timer_us in menu governor
4911d833a2f cpuidle: Check for dev before deregistering it.
0f015c42ebd cpuidle: Make it clear that governors cannot be modules
f7e870e52c4 cpuidle: remove cpuidle_unregister_governor()
60673298206 cpuidle: don't call poll_idle_init() for every cpu
e792912574d cpuidle: use drv instead of cpuidle_driver in show_current_driver()
dbcdd6f5191 cpuidle: call cpuidle_get_driver() from after taking cpuidle_driver_lock
6ea01f34cc5 cpuidle: replace multiline statements with single line in cpuidle_idle_call()
3f15db5a921 cpuidle: reduce code duplication inside cpuidle_idle_call()
59bb7c1c741 cpuidle: merge two if() statements for checking error cases
f25550e971e cpuidle: rearrange __cpuidle_register_device() to keep minimal exit points
a75b0b83cbe cpuidle: rearrange code in __cpuidle_driver_init()
149db6a4edb cpuidle: make __cpuidle_driver_init() return void
069dda95bfe cpuidle: make __cpuidle_device_init() return void
de1b8e172fc cpuidle: Check if device is already registered
bb519773f19 cpuidle: Introduce __cpuidle_device_init()
18cfd202772 cpuidle: Introduce __cpuidle_unregister_device()
7747ac1fe00 cpuidle: Check cpuidle_enable_device() return value
3464ca68f7b cpuidle: Fix comments in cpuidle core
6310ba094ca cpuidle: Fix ARCH_NEEDS_CPU_IDLE_COUPLED dependency warning
5b6d7d29c58 cpuidle: Comment the driver's framework code
8eff18162ca cpuidle: simplify multiple driver support
e5ce737cd49 cpuidle: improve governor Kconfig options
5c582c097e6 ARM: introduce common set_auxcr/get_auxcr functions
43e1381ec6f cpuidle: coupled: disable interrupts after entering safe state
50b00982807 cpuidle: Change struct menu_device field types
20841ce7874 cpuidle: Add a comment warning about possible overflow
4a20bf8a696 cpuidle: Fix variable domains in get_typical_interval()
836bb88fb37 cpuidle: Fix menu_device->intervals type
9d7621a3cee cpuidle: CodingStyle: Break up multiple assignments on single line
83b5f52a785 cpuidle: Check called function parameter in get_typical_interval()
71672ffb092 cpuidle: Rearrange code and comments in get_typical_interval()
e53707020a8 cpuidle: Ignore interval prediction result when timer is shorter
fa9ddc433c6 vm_is_stack: use for_each_thread() rather then buggy while_each_thread()
7a53faee470 oom_kill: add rcu_read_lock() into find_lock_task_mm()
ef3f3e7e241 oom_kill: has_intersects_mems_allowed() needs rcu_read_lock()
85dd5af176f oom_kill: change oom_kill.c to use for_each_thread()
46036bd4ef1 OOM, PM: OOM killed task shouldn't escape PM suspend
2bcbf896ddd freezer: Do not freeze tasks killed by OOM killer
2b24256f5d1 tty: Fix high cpu load if tty is unreleaseable
98be04a8bf1 hells_defconfig: Refresh
1ceb4e109cf rcu: Suppress lockdep false positive for rcp->exp_funnel_mutex
58a055ac1b8 rcu: Avoid IPIing idle CPUs from synchronize_sched_expedited()
9d19beffd9f rcu: Use rcu_gp_kthread_wake() to wake up grace period kthreads
4fa24dc43a9 rcu: Check both root and current rcu_node when setting up future grace period
05761c12096 rcu: Make callers awaken grace-period kthread
f9cde3d5e8e rcu: Update cpu_needs_another_gp() for futures from non-NOCB CPUs
c77e0ee518f rcu: Protect ->gp_flags accesses with ACCESS_ONCE()
f7800432074 nohz_full: Force RCU's grace-period kthreads onto timekeeping CPU
58905d96ed6 rcu: Throttle rcu_try_advance_all_cbs() execution
8263aacb1ae rcu: Flag lockless access to ->gp_flags with ACCESS_ONCE()
c5433833cd2 rcu: Prevent spurious-wakeup DoS attack on rcu_gp_kthread()
3e0932ac356 rcu: Avoid redundant grace-period kthread wakeups
767ca1f0647 rcu: Move redundant call to note_gp_changes() into called function
a3c0ab6b652 rcu: Inline trivial wrapper function rcu_start_gp_per_cpu()
7cdc2033b1f rcu: Eliminate check_for_new_grace_period() wrapper function
9c9b5295df2 rcu: Merge __rcu_process_gp_end() into __note_gp_changes()
d3dae71b6dc rcu: Switch callers from rcu_process_gp_end() to note_gp_changes()
2355e4f2f93 rcu: Rename note_new_gpnum() to note_gp_changes()
a0de9dae069 rcu: Make __note_new_gpnum() check for ends of prior grace periods
3e1cf366300 rcu: Move code to apply callback-numbering simplifications
b3d2e0da524 rcu: Fix missing task information during rcu-preempt stall
162cdc16c72 rcu: Add GP-kthread-starvation checks to CPU stall warnings
6067a77a6e2 rcu: Make RCU_CPU_STALL_INFO include number of fqs attempts
76ce639a891 rcu: Improve diagnostics for spurious RCU CPU stall warnings
0849ca6e843 rcu: Move RCU-related source code to kernel/rcu directory
d3818b69980 random32: add prandom_seed_full_state helper
ea7bc15b757 random32: improvements to prandom_bytes
a93d7aaed2d lib/random32.c: minor cleanups and kdoc fix
3b53cc6baaa random32: avoid attempt to late reseed if in the middle of seeding
de92824e8a5 random32: use msecs_to_jiffies for reseed timer
e47f60eccf3 random32: add __init prefix to prandom_start_seed_timer
2a11dafb467 random32: add test cases for taus113 implementation
e363f5db0ce random32: upgrade taus88 generator to taus113 from errata paper
30958a55602 random: allow architectures to optionally define random_get_entropy()
7618668250c random32: move rnd_state to linux/random.h
a3d80548c3c random32: add prandom_reseed_late() and call when nonblocking pool becomes initialized
24b78497000 random32: add periodic reseeding
ed22f83a422 jbd2: fix ocfs2 corrupt when updating journal superblock fails
81b08bfbfa6 jbd2: use GFP_NOFS in jbd2_cleanup_journal_tail()
7961381b793 ext4: replace open coded nofail allocation in ext4_free_blocks()
f1092e1977a ext4: correctly migrate a file with a hole at the beginning
1c690257fbc ext4: be more strict when migrating to non-extent based file
239d7c675fc ext4: fix reservation release on invalidatepage for delalloc fs
4f383dc761d ext4: don't retry file block mapping on bigalloc fs with non-extent file
d7eb5085b9f ext4: call sync_blockdev() before invalidate_bdev() in put_super()
389c75ecba9 ext4: fix race between truncate and __ext4_journalled_writepage()
c69c798d284 quota: provide interface for readding allocated space into reserved space
8209441edd7 ext4: fix warning in ext4_da_update_reserve_space()
53abf4a9d43 ext4: fix oops when loading block bitmap failed
e1c260c4578 ext4: fix overflow when updating superblock backups after resize
1fd6350408f ext4: check s_chksum_driver when looking for bg csum presence
9d0d70180a0 ext4: fix reservation overflow in ext4_da_write_begin
09342f84a0e ext4: add ext4_iget_normal() which is to be used for dir tree lookups
adc4893b3c5 ext4: grab missed write_count for EXT4_IOC_SWAP_BOOT
e528d4ffdb7 ext4: don't check quota format when there are no quota files
c73ab5c261f ext4: check EA value offset when loading
9ce6cbdba19 ext4: fix BUG_ON in mb_free_blocks()
16f7e37a096 ext4: disable synchronous transaction batching if max_batch_time==0
3c941b4b784 ext4: clarify error count warning messages
700c0b5ad7b ext4: fix unjournalled bg descriptor while initializing inode bitmap
042504f3167 ext4: Fix hole punching for files with indirect blocks
07e167bfeb9 ext4: Fix buffer double free in ext4_alloc_branch()
f8b144b67c1 ext4: fix wrong assert in ext4_mb_normalize_request()
76c6d00a8c4 ext4: fix zeroing of page during writeback
bc9cd8df9d1 ext4: optimize test_root()
47b289ad2c3 ext4: optimize starting extent in ext4_ext_rm_leaf()
270b996ab3d ext4: handle symlink properly with inline_data
41400a9294c ext4: convert write_begin methods to stable_page_writes semantics
9ebaf01cbc4 ext4: prevent bugon on race between write/fcntl
ac443418c35 USB: android: Fix memory leak in mass_storage_function_init()
474aef210a8 mfd: wcd9xxx-slimslave: Correct slim base rate for 44.1KHz sample rate
85abe01a3f2 mfd: wcd9xxx-slimslave: Add support for 44.1KHz sample rate
199eee06e50 mfd: wcd9xxx-slimslave: Return error to caller if buffer timeout happens
6321fe6402a ASoC: wcdxxxx: Add check for buffer overflow
684bea8e392 drivers: mfd: Cleanup of wcd drivers
2f9770cf959 ASoC: msm: qdsp6v2: fix for pcm_write failure during voip
25e9586669f ASoC: msm: Fix to avoid crash during voip call
b2a6320db6a ASoC: msm: qdsp6v2: handle VoIP call recovery during SSR
39bfe93371a ASoC: msm: Add G711 media type support for Voip call
775d5517c8b usb: gadget: add audio dependencies to USB_G_ANDROID
e3a3e933205 block: Fix format string mismatch in cfq-iosched.c
d0868e16d1a cpufreq: Initial CPU utilization should be 0
aa47bcc5b19 msm: mdss: remove more logging spam
eeafc24822a hells_defconfig: Refresh
1832fe59a65 mm: Dynamic management of dirty page writebacks
c0d6503dc16 PowerSuspend: Fix Compile
5a2043a069c kernel/power/powersuspend: new PM kernel driver for Android w/o early_suspend v1.7 (faux123/Yank555.lu)
6c372d8f902 kernel/power/powersuspend: new PM kernel driver for Android w/o early_suspend v1.6 (faux123/Yank555.lu)
1fceaa8266e kernel/power/powersuspend: new PM kernel driver for Android w/o early_suspend v1.5 (faux123/Yank555.lu)
f0f2fb25b43 hells_defconfig: Enable Async Fsync
8115f61d874 fs: sync: Asynchronous Fsync from HTC
536fbd57eb5 mm/vmacache: inline vmacache_valid_mm()
ab41620decf mm,vmacache: optimize overflow system-wide flushing
9f1cce01a62 mm: don't pointlessly use BUG_ON() for sanity check
0cccea1d3d9 mm: per-thread vma caching
a8092cd353a msm: mdss: rotator: Remove work_busy
4d02fdb7ea7 writeback: fix possible underflow in write bandwidth calculation
c9084209e0d arm/dt:8084: Disable always-on for pma8084_lvs4
8110cb83724 arm/dts: shamu: decrease reddish color at low brightness
9f0189a4d3f audit: Mute userspace and kernel audit logs
12c051ba8f9 ARM: make kernel oops easier to read
6ea9a6ecb50 cfq-iosched: minor cleanups
947ba416349 cfq-iosched: fix oom cfq_queue ref leak in cfq_set_request()
fa8c7fcca1a cfq-iosched: fix async oom queue handling
0bb17b60705 cfq-iosched: simplify control flow in cfq_get_queue()
0b7c9e43533 msm: camera: isp: protect driver from using invalid bufq
cf1f06da7d9 tcp: autocork should not hold first packet in write queue
709f90f1589 tcp: auto corking
6aa7a602387 tcp: enable sockets to use MSG_FASTOPEN by default
e7aa91e468d disable crc check
525ff5d65cc binder: Quiet Binder
32e3cd32d6d msm: camera: suppress excessive logging - boot faster
8c10453dc88 Lower GPU voltage constraint
fcaf3363026 crypto: arm/aes update NEON AES module to latest OpenSSL version
29da54ad86c ion: this debugfs creation fails - remove code for it
4d61f614442 hells_defconfig: Enable MSM_SLEEPER
92d0353e144 msm-sleeper: limit max freq when screen is off
ab6e0aca880 qcom-cpufreq: limit min and max cpu frequencies
bd33e2ace72 hells_defconfig: Enable kexec
38df6aed3a0 Implement kexec-hardboot
24fe4fb8aa5 fs/namei.c: fix potential memory leak in path_lookupat
f9dbe66c47b tty: Prevent untrappable signals from malicious program
522993a8ecf cfq-iosched: fix incorrect filing of rt async cfqq
eb33cab85ec cfq-iosched: handle failure of cfq group allocation
92cd7b3630d ARM: dts: msm: Remove support for qcrypto1 device for 8084
fcac3bd2a4b ARM: dts: msm: disable support of 50MHz for i2c for apq8084
9b32510a1c5 Input: fix defuzzing logic
36fac617060 vfs: fix bad hashing of dentries
c17f8c061d5 dcache.c: get rid of pointless macros
644faf7c1ca selinux: conditionally reschedule in hashtab_insert while loading selinux policy
b092a72a1e2 selinux: conditionally reschedule in mls_convert_context while loading selinux policy
51e9b1d17d2 selinux: no recursive read_lock of policy_rwlock in security_genfs_sid()
70f449f87d2 selinux: fix a possible memory leak in cond_read_node()
1dae071250e selinux: simple cleanup for cond_read_node()
2cf3a2f0dc8 usb: gadget: dwc3: Improve interrupt handler performance
c0d99893991 msm: camera: Assign NULL after freeing memory
b6b14824b2f misc/drv2605.c: proper scaling is done in userspace to allow full range control
85633365a7c drv2605: vibe strength control
e7e5b1f0833 drv2605: expose vibrator to kernel
c5e95400c71 smb135x-charger.c: increase polling time for ADC
7e1c3cf0ff8 msm: pcie: correct shadow memory access
ad37d3fd2e2 msm: pcie: reduce the PERST latency
172f515b3d5 USB: android: Fail ffs_ready (i.e. start adbd) if ADB not enabled
93a1dc1bf75 USB: android: Fix mutex issue if ffs_close runs after ADB disable
add3d943abe USB: android: Fix synchronization between ffs_enable and ffs_close
b7eada55534 mm: slub: Default slub_max_order to 0
6fefd03ec0d PCI / PM: Resume runtime-suspended devices later during system suspend
630a2a7795f ext4: Speedup WB_SYNC_ALL pass called from sync(2)
8a766c6614e writeback: increase bdi_min_ratio to 5 in light of the latest writeback commit.
05ec806f790 writeback: fix writeback cache thrashing
2de3775530c block: Reserve only one queue tag for sync IO if only 3 tags are available
45cdffc5d79 readahead: make context readahead more conservative
b133e950a02 writeback: fix race that cause writeback hung
0f3d397a040 sync: don't block the flusher thread waiting on IO
abe585b5fc7 binfmt_elf.c: use get_random_int() to fix entropy depleting
3af5606ad59 ARM: Honor udelay convention for timer-based delay
a2afca0e3ad sched: Micro-optimize by dropping unnecessary task_rq() calls
4b28a0afbba sched: Fix sleep time double accounting in enqueue entity
1a564bd4e4d sched: Don't mix use of typedef ctl_table and struct ctl_table
1467df955d8 sched: Remove WARN_ON(!sd) from init_sched_groups_power()
2e4f358711c sched: Fix memory leakage in build_sched_groups()
3721585d301 sched: Use cached value of span instead of calling sched_domain_span()
7747aa0e109 sched: Create for_each_sd_topology()
ac73b3d89ee sched: Don't set sd->child to NULL when it is already NULL
d0c61397fc0 sched: Don't initialize alloc_state in build_sched_domains()
f365850c2a1 sched: Remove unused params of build_sched_domain()
8b6785821be sched: Remove the useless declaration in kernel/sched/fair.c
e99f336f761 sched: Refine the code in unthrottle_cfs_rq()
76b026aa2e7 sched/rt: Simplify pull_rt_task() logic and remove .leaf_rt_rq_list
037087c206a sched/fair: Remove unused variable from expire_cfs_rq_runtime()
13081c0ebaf sched: Use swap() macro in scale_stime()
82c90f01685 sched/rt: Remove redundant nr_cpus_allowed test
3d51bbe5fd8 sched/rt: Fix task_tick_rt() comment
29963c2cad3 sched: Use an accessor to read the rq clock
0d3f3f02541 sched: Update rq clock earlier in unthrottle_cfs_rq
d3264227072 sched: Update rq clock before setting fair group shares
58cd19a1977 sched: Update rq clock before migrating tasks out of dying CPU
bea700a58be timers, sched/clock: Optimize cache line usage
f18b1d25249 sched: Remove a wake_affine() condition
ac57eff4cef genirq: Remove invalid export
ef4b87ff23b genirq: Fix null pointer reference in irq_set_affinity_hint()
cfa571f3b9d genirq: Set initial affinity in irq_set_affinity_hint()
3176640dde8 hells_defconfig: Refresh
0cd4022b965 Remove GENERIC_HARDIRQ config option
0042949afc3 timer/hrtimer: reprogram remote CPU's timer hardware
a621ab23c87 irq_work: Implement remote queueing
c240dbf5ac2 irq_work: Split raised and lazy lists
59d547f33b2 usb: don't use PREPARE_DELAYED_WORK
d150828e64b workqueue: Remove deprecated flush[_delayed]_work_sync()
8bbecbe1808 workqueue: Spelling s/instensive/intensive/
e99c7e6ad1f workqueue: remove PREPARE_[DELAYED_]WORK()
cb2ddeb607e workqueue: Remove deprecated __cancel_delayed_work()
e2b3fd24ab1 workqueue.h: remove loops of single statement macros
d61eaa1d328 workqueue: remove unused WORK_CPU_END
9d4278fe513 workqueue: move flush_scheduled_work() to workqueue.h
1f92066266c workqueue: remove unused work_clear_pending()
bd3d6225e59 kernel/workqueue.c: pr_warning/pr_warn & printk/pr_info
9999caea59c workqueue: simplify wq_update_unbound_numa() by jumping to use_dfl_pwq if the target cpumask equals wq's
07dbb3e4a09 workqueue: wake regular worker if need_more_worker() when rescuer leave the pool
455e45b20fc workqueue: alloc struct worker on its local node
05b28010564 workqueue: reuse the already calculated pwq in try_to_grab_pending()
fb1709403e4 workqueue: stronger test in process_one_work()
209dba9bd31 workqueue: remove useless WARN_ON_ONCE()
d1b918f7a2d hells_defconfig: Enable SUSPEND_TIME_TIMEKEEPING
af3e53b8a8f sched: Fix RLIMIT_RTTIME when PI-boosting to RT
163f8d73965 sched: Queue RT tasks to head when prio drops
81f12bbaedd sched: Change autogroup_move_group() to use for_each_thread()
dba67c17dac sched: Change thread_group_cputime() to use for_each_thread()
2805c9256e4 sched: print_rq(): Don't use tasklist_lock
3ba1b8d3388 sched: s/do_each_thread/for_each_process_thread/ in debug.c
a6b6a29621c sched: s/do_each_thread/for_each_process_thread/ in core.c
f5f084718b6 sched: Fix exec_start/task_hot on migrated tasks
7f583888b75 workqueue: make the workqueues list RCU walkable
c6573117c78 workqueue: Fix workqueue stall issue after cpu down failure
d0ea1b83fc3 workqueue: clear POOL_DISASSOCIATED in rebind_workers()
3e5743a6c5b pm: suspend: read suspend time from timekeeping
64593fcc74d cputime: Fix jiffies based cputime assumption on steal accounting
06c65ad18ba sched/core: Fix an SMP ordering race in try_to_wake_up() vs. schedule()
37bfa1b4329 sched/fair: Stop searching for tasks in newidle balance if there are runnable tasks
7efb09f5700 sched/balancing: Reduce the rate of needless idle load balancing
83124488468 sched/fair: Fix tg_set_cfs_bandwidth() deadlock on rq->lock
8472bfd731e sched: Avoid throttle_cfs_rq() racing with period_timer stopping
8babc430127 sched: Fix race in idle_balance()
1ae9e1be772 Revert "sched: Make dl_task_time() use task_rq_lock()"
f1f93e701d8 hrtimer: Allow concurrent hrtimer_start() for self restarting timers
344c3c6cc42 sched: Export sched_setscheduler_nocheck()
14249bd9945 sched: Optimize build_sched_domains() for saving first SD node for a cpu
73d283a7b70 sched: Fix comment for sched_info_depart
e5199e475ed sched: create a statistic structure
4cd61bf9949 timer: Prevent overflow in apply_slack
11bc4006769 sched: Force sleep on consecutive sched_yields
8a061ac9968 sched: Update rq clock before calling check_preempt_curr()
77b064f0557 sched: Make dl_task_time() use task_rq_lock()
c3f7a357a02 sched: Teach scheduler to understand TASK_ON_RQ_MIGRATING state
ec351427e7e perf: Optimize group_sched_in()
f496b0a9506 Input: optimize events_per_packet count calculation
9bea2a8f492 sched: Optimize task_sched_runtime()
da57b4dea33 posix-cpu-timers: don't account cpu timer after stopped thread runtime accounting
e9b93a0f6d8 sched/balancing: Prevent the reselection of a previous env.dst_cpu if some tasks are pinned
00473ac52e4 sched: fair: let minimally loaded cpu balance the group. original patch here https://github.com/franciscofranco/hammerhead/commit/65b2dbd9b941fd2a3e45a3d6c6674ce4e6a07a73
c2f20b6f2e9 sched/fair: Fix group power_orig computation
97aa39d87f6 nohz_full: Add Kconfig parameter for scalable detection of all-idle state
88b1a4e24ec sched: Add a check for cpu unbound deferrable timers
1a57e3d3281 PM / Wakeup: Use rcu callbacks for better performance
bf158868713 smpboot: use kmemleak_not_leak for smpboot_thread_data
df949c2c25b arm: smp: Update the topology masks before calling CPU_STARTING notifiers
7001bf6dee4 nohz: Include local CPU in full dynticks global kick
ae7234413a6 nohz: Rename a few state variables
4a0ed9c3ffc nohz: Only enable context tracking on full dynticks CPUs
d04185b7061 nohz: fix compile warning in tick_nohz_init()
6aa5de925d6 nohz: Do not warn about unstable tsc unless user uses nohz_full
255a706c1ea nohz: Remove obsolete check for full dynticks CPUs to be RCU nocbs
557105dad94 nohz: Warn if the machine can not perform nohz_full
b0360e94b08 nohz: ensure users are aware boot CPU is not NO_HZ_FULL
a29bcb87275 workqueue: sanity check pool->cpu in wq_worker_sleeping()
6a9d4626402 workqueue: use schedule_timeout_interruptible() instead of open code
820ce984197 workqueue: remove the empty check in too_many_workers()
5eae0f9ea62 workqueue: use "pool->cpu < 0" to stand for an unbound pool
fda5c3240ea kernel/workqueue.c: pr_warning/pr_warn & printk/pr_info
3c40360e1a8 workqueue: remove the confusing POOL_FREEZING
04306d6eda0 workqueue: swap set_cpus_allowed_ptr() and PF_NO_SETAFFINITY
3a55a5ea390 workqueue: destroy_worker() should destroy idle workers only
f8a64ae3d19 workqueue: use manager lock only to protect worker_idr
98f24fe825b kernel/workqueue.c: pr_warning/pr_warn & printk/pr_info
2240b629d83 workqueue: apply __WQ_ORDERED to create_singlethread_workqueue()
c1e7e72691f workqueue: fix dev_set_uevent_suppress() imbalance
179ea20f547 workqueue: make rescuer_thread() empty wq->maydays list before exiting
77b1bb52065 workqueue: fix bugs in wq_update_unbound_numa() failure path
d53b67b65bb workqueue: zero cpumask of wq_numa_possible_cpumask on init
b117bc5f3b5 workqueue: fix a possible race condition between rescuer and pwq-release
91c3140f9d0 workqueue: Provide destroy_delayed_work_on_stack()
a64ac235a8f workqueue: fix pool ID allocation leakage and remove BUILD_BUG_ON() in init_workqueues
76de21c575a kernel/smp.c: quit unconditionally enabling irqs in on_each_cpu_mask().
719854d969c kernel/smp.c: free related resources when failure occurs in hotplug_cfd()
65ff4a2dfc9 sched: Introduce preempt_count accessor functions
82e2c861858 perf: Use hrtimers for event multiplexing
62648ab81ab sched/rt: Reduce rq lock contention by eliminating locking of non-feasible target
fd0744d115e workqueue: allow rescuer thread to do more work.
0ac0cb6d3a2 sched/completion: Add lock-free checking of the blocking case
fd993cc2b02 Squashed hrtimer optimization commits.
91b441e3da2 Default to NOATIME and NODIRATIME for FS performance improvement.
622799767e5 Replace BUG_ON with WARN_ON and return immediately.
9d38fc8a748 Use IRQ tree instead of linear to fix slowpath warning.
d146b3da66f jiffies conversions: Use compile time constants when possible
bb5c2e2d94e jiffies: Fix timeval conversion to jiffies
43e68a4bb83 alarmtimer: add verification for rtc dev in power_on_alarm_init
dbb436ed7cd alarmtimer: set power off alarm to be triggered on time
3a46a45f2e6 alarm: init power_on_alarm in alarm_dev_init
fc4fb4e7f21 rtc: alarm: Fix data handling issue with alarm->type
b736e8725c6 ksoftirqd: Enable IRQs and call cond_resched() before poking RCU
d19d9699a69 cpufreq: Use correct locking for cpufreq_cpu_data
c3239095c62 timer: reduce cache bouncing of deferral timer wheel
d0f94fc537d hells_defconfig: Enable GENERIC_SCHED_CLOCK
33780bfd986 clockchips: Add FEAT_PERCPU clockevent flag
07d0af728b3 time: Change the return type of clockevents_notify() to integer
7f0376d39bc clockevents: Move the tick_notify() switch case to clockevents_notify()
e4368fbe873 clockevents: Serialize calls to clockevents_update_freq() in the core
6fbc5ae43d7 tick: broadcast: Deny per-cpu clockevents from being broadcast sources
cdbafe5bb80 tick: broadcast: Check broadcast mode on CPU hotplug
439252589b7 tick: Introduce hrtimer based broadcast
0755bc4df9b sched_clock: Avoid corrupting hrtimer tree during suspend
d83d75e18a8 clocksource: arm_arch_timer: Enable counter access for 32-bit ARM
ece458349cc ARM64: arch_timer: add support to configure and enable event stream
4688714b753 arm64: Widen hwcap to be 64 bit
cc93da88bae ARM: arch_timer: add support to configure and enable event stream
e9a3140a924 ARM/ARM64: arch_timer: add macros for bits in control register
e8e115f145a clocksource: arch_timer: Export arch_counter_get_cntvct()
adffa0784b3 clocksource: arch_timer: Do not register arch_sys_counter twice
0ae3ca05e9e arch_timer: Move to generic sched_clock framework
104cd5f091d arm64: kernel: compiling issue, need delete read_current_timer()
1d1d0dd670a sched_clock: Add support for >32 bit sched_clock
6afc327dafc sched_clock: Use an hrtimer instead of timer
4b7db7800fa sched_clock: Use seqcount instead of rolling our own
4980244b0d1 clocksource: Extract max nsec calculation into separate function
381c770479a sched_clock: Make ARM's sched_clock generic for all architectures
1c0bb9e1430 nohz: Avoid tick's double reprogramming in highres mode
896673c5822 nohz: Fix spurious periodic tick behaviour in low-res dynticks mode
7265aafd43f nohz: Get timekeeping max deferment outside jiffies_lock
06e4f264399 proc: stat: fix idle time jump
1fa542f8fbd nohz: Convert a few places to use local per cpu accesses
ee96f62cbd3 sched: Micro-optimize the smart wake-affine logic
009e59ce4af sched: Implement smarter wake-affine logic
fc8e980d233 sched/__wake_up_sync_key(): Fix nr_exclusive tasks which lead to WF_SYNC clearing
be9ca032536 cpumask: Fix cpumask leak in partition_sched_domains()
7d07676a3e3 workqueue: fix hang involving racing cancel[_delayed]_work_sync()'s for PREEMPT_NONE
a01f2556019 tick: don't update idle time if cpu offline
4a14bce3e01 sched: Fix inaccurate accounting for real-time task
e0c555cc403 workqueue: fix subtle pool management issue which can stall whole worker_pool
b7304a8f0f1 genirq: Allow forcing cpu affinity of interrupts
24b2bc56be0 irqchip: Gic: Support forced affinity setting
4d94b5db99b hrtimer: Set expiry time before switch_hrtimer_base()
480534c66e3 hrtimer: Prevent remote enqueue of leftmost timers
802e1dfea3f hrtimer: Prevent all reprogramming if hang detected
7822d6eab23 sched: Use CPUPRI_NR_PRIORITIES instead of MAX_RT_PRIO in cpupri check
3734a940254 genirq: Sanitize spurious interrupt detection of threaded irqs
b197772c3a1 sched: Fix unreleased llc_shared_mask bit during CPU hotplug
079aa708601 ARM: sched_clock: Load cycle count after epoch stabilizes
0e6e070c080 time: adjtimex: Validate the ADJ_FREQUENCY values
063a7d32f93 alarmtimer: Lock k_itimer during timer callback
7cb7c8c0c05 alarmtimer: Do not signal SIGEV_NONE timers
f59fd4fd854 timer: Fix lock inversion between hrtimer_bases.lock and scheduler locks
3cb53e44a57 alarmtimer: Fix bug where relative alarm timers were treated as absolute
80feea20a5c net: rps: fix cpu unplug
c0cecd6265b irq: Consolidate do_softirq() arch overriden implementations
245e9f47365 sched, smp: Correctly deal with nested sleeps
83a89c6a875 smpboot: Add missing get_online_cpus() in smpboot_register_percpu_thread()
c66f9ab2f38 timer: make deferrable cpu unbound timers really not bound to a cpu
87a9d9904fd PM: Fix a bug in dpm_suspend_late()
86ad7c70a39 irq_work: register irq_work_cpu_notify in early init
58d4e744701 GPU: Add 430mhz step
b6e81ee8f66 hells_defconfig: Enable SIMPLE_GPU_ALGORITHM
9a5699f6a86 Simple GPU Algorithm: Initial coding for devfreq based Adreno Drivers
acda3a2f2b0 msm: kgsl: set the correct max_state
53e10813fa7 PM / devfreq: fix scaling down logic for simple clock scaling
3a33029eb4b PM / devfreq: Remove unused simple_ondemand governor data
c0c5983f235 msm: kgsl: Bump the GPU frequency for long blocks of processing
476d07d9bb9 PM: devfreq: Allow userspace configuration of simple_ondemand
546e7cdbe52 PM: devfreq: Always reflect a change of polling interval
c5a4aef6dd2 PM: devfreq: Fix simple_ondemand crashing on startup
9cba2a0e698 msm: kgsl: Wake up GPU only for touch events
877f3033129 msm: kgsl: Report correct GPU frequency in sysfs
69864e1976e PM: devfreq: Use high priority workqueue
6c8245c4895 ARM: add .gitignore entry for sha256-core.S
17d451c0969 arm:lib: Correct Neon Flags
79df6694cad build: Enable unsafe-math-optimizations
3abf9a54877 ARM: 7835/2: fix modular build of xor_blocks() with NEON enabled
e4cf90bdedc ARM: crypto: add NEON accelerated XOR implementation
537c0dde1f0 msm: thermal: Higher temp threshold to 70°C
8a8c46dc74b msm: thermal: Adjust thermal thresholds
f42430d9c50 thermal-core: Fix to send correct trip type to get trip temperature
5bc3449b57a msm: thermal: add franco simple thermal driver (squash)
1fedc779870 thermal: tsens: Fix TSENS Upper/Lower IRQ type
f8f0c5e1825 thermal: tsens: Add NULL pointer check for id
be48f040ac9 audit: Imma let you finish, but shut up
7f14662522c selinux: just shut up
c150ca66fa8 cpufreq: Add cpufreq_notify_utilization back to governors to work with mako_hotplug
6896bf78156 Mako: Add working toggle.
91d58ad5a66 mako_hotplug: increase the work schedule time when dual-core or quad-core mode is active, from 1 to 2 seconds
a4dc2909fcf mako_hotplug: don't use PAGE_SIZE for snprintf
ae2351aa8f4 mako_hotplug: run the main work only once every second if special cases apply
9110eb4cdc0 mako_hotplug: don't offline cores if the load at that sample is above the threshold, even if we met all the other conditions
22b55565487 mako_hotplug: let's use an unbound wq
f3affdb96ef cpufreq: add an helper to get/set cpu utilization to be used by mako_hotplug
b947a8a9513 mako_hotplug: remove works for resume/suspend entirely
a783c7ea9ba mako_hotplug: squash code from lollipop branch
b1235ac8c50 hells_defconfig: Enable ZEN_DECISION
b842dd21227 msm: zen_decision: Don't set default settings in zd_probe
fc803a77305 msm: zen_decision: I'm a dummy - Correctly allow bat_threshold_ignore to be changed in the userspace...
e4bfab7527f msm: zen_decision: Missed f(x) name change
958dcd73ae9 msm: zen_decision: Only call INIT_DELAYED_WORK once - Only call it once, not every time we want to run a thread - Rename some functions for clarity
1d7b1ba0258 msm: zen_decision: change queue_delayed_work_on to queue_delayed_work - Not necessary to explicitly queue work on CPU0 anymore
3850d71b936 msm: zen_decision: Use WQ_UNBOUND and max_active = 1 when allocating WQ - Set WQ_UNBOUND flag on alloc_workqueue which gives the CPU scheduler freedom to move it to other CPUs - Pass 1 as max_active, ensure only 1 task is running at a time from the WQ
25a7df5ef29 msm: zen_decision: remove unnecessary logic - The iteration over offline CPUs doesn't need an explicit check for CPU0 because CPU0 will never be part of the iteration.
114ee1495b2 msm_zen_decision: some cleanups - Cleanup some commnets and Kconfig description
4485f7f709a msm: zen_decision v2.0 - Different functionality than v1.0, the following is the complete functionality: - On screen ON, queue worker thread to bring all CPUs online after wake_wait_time - If current "battery" device level is <= bat_threshold_ignore, don't do any CPU_UP work to account for MSMThermal default activity
812e85540d9 msm_zen_decision: disable by default - What this does now with screen off/on doesn't really have a point. I thought MPDec was messing with this before. - Leaving for future expansion
44a4662f78b msm_zen_decision: use per-cpu mutex to synchronize hotplug operations
89662871219 msm_zen_decision: General fixes and cleanup - Actually use "enabled" to disable the driver - Actually allow suspend_wait_time to change > 0 - Restrict suspend_wait_time to a maximum of 60s
baf70e82e98 msm: add msm_zen_decision This adds a simple driver intended to allow the MPDecision service to be disabled. The driver is easily extendable, but currently it: - Can be enabled/disabled in /sys/kernel/zen_decision/enabled - On screen power OFF it removes all cpu cores after suspend_wait_time - On screen power ON it enables all cpu cores. - /sys/kernel/zen_decision/suspend_wait_time (ms) refers to how long we wait after screen is off to remove the cores (default 5s). This just to avoid removing cores in excess.
938114f8a67 Revert "sched_avg: add run queue averaging."
e3b12ea30c3 hells_defconfig: Enable ElementalX
3900de10ede cpufreq_elementalx: pick next freq from freq tables
54cf6c2a5ca cpufreq_elementalx: tune and make less aggressive
0a4b648edc0 cpufreq_elementalx: replace input boost with down factor and floor frequency
5051ad05c4b cpufreq_elementalx: disable input boost
e07fc2d88e5 cpufreq_elementalx: let input boost drop to lower frequency
7b05c41cfd6 cpufreq_elementalx: increase max screen off freq
e6fde7c7a66 cpufreq_elementalx: apply input boost per-cpu
2b0a086b5ec cpufreq_elementalx: refactor and adjust
1ecc1cc7ff6 ElementalX governor version 2
8229871120c Revert "cpufreq: make the "scaling_cur_freq" sysfs entry pollable"
6921c50b9ea qcom-cpufreq: Restore CPU frequency during resume
d7d30a65aba qcom-cpufreq: Remove save/restore of scheduling policy
be190061d38 cpufreq: Break out early when frequency equals target_freq
591e1069602 cpufreq: governor: remove copy_prev_load from 'struct cpu_dbs_common_info'
f579870064b cpufreq: remove race while accessing cur_policy
0bfad793975 cpufreq: Fix timer/workqueue corruption by protecting reading governor_enabled
c006089231c cpufreq: governor: Be friendly towards latency-sensitive bursty workloads
62723ab0ff6 cpufreq: Add if cpu is online check in show
12cee192ee6 cpufreq: Return directly in __cpufreq_get if policy is NULL
060d57e079f cpufreq: Protect against hotplug in cpufreq_register_driver()
7f907a28a73 cpufreq: stats: Don't update cpufreq_stats_table if it's NULL
a5d02e178e7 cpufreq: stats: Print error messages if table initialization fails
7ca9403f3b8 msm: Use ammended interruptible threads
b5a07ebcf83 TouchBoost: Fix GCC5 Compile
119b4aaa007 input: touchboost: conservative samples every 10ms, no point in limiting input_time to update its value in 50ms intervals
20ca86fd0fd cpufreq: Fix compile error
c5ef037196f input: add generic touch event listener
5c79457c0af cpufreq: governor: squash code from lollipop branch. If you're interested in the commit history you can check it with complete commits from that branch
9bb74dd6177 cpufreq: ondemand: update code to Linux v3.18
d98a59affe6 cpufreq: Introduce new relation for freq selection
c87881da826 cpufreq: conservative: Tune some values
a7ee594084c cpufreq: conservative: use 20ms samples
6f20348c0e2 cpufreq: conservative: Higher boost duration to 1s
b07ae32db95 cpufreq: conservative: ramp down to min freq if the load is below 5%
45878b2eeda cpufreq: conservative: squash code from lollipop branch. If you're interested in the commit history you can check it with complete commits from that branch
d3691eacfe1 cpufreq: interactive: Use my defaults
57f7f5ef5bc CHROMIUM: cpufreq: interactive: calculate load before freq change
6831287c308 cpufreq: interactive: Rearm governor timer at max freq
7d2d89be82a CHROMIUM: Replace obsolete strict_strtoul calls.
ffee974d811 cpufreq: interactive: add support for input_boost for users who desire to run this governor instead
70ab84fd996 cpufreq: interactive: add defaults from https://github.com/CyanogenMod/android_device_oppo_msm8974-common
f6798866153 cpufreq: interactive: squash https://github.com/CyanogenMod/android_kernel_oneplus_msm8974/commits/cm-12.1/drivers/cpufreq/cpufreq_interactive.c
a5d1ca3e782 hells_defconfig: Enable RWSEM_XCHGADD_ALGORITHM
e9aed09e9f0 Optimized ARM RWSEM algorithm
f189d12bde2 lib/memcopy: use glibc version
ead26155b39 lib/string: use glibc version
18f6482cf24 int_sqrt: Improve 3x faster integer sqrt.
8532c27e400 int_sqrt.c: Correction square root algo with naming
194538a7413 Increase max readahead value to 1024
920d30b6e79 readahead: Fix an error (thx ramgear)
c4f296cfc02 Readahead: Optimize divide/multiply by power of 2 using L/R shift (thx ramgear)
80d73842f74 hsic: avoid keeping the ws activated after sysfs disable
e0c2ad6325e hsic: allow wl_divide = 0 to completely disable hsic wake source
cbc280b8cf7 hsic: introduce user configurable timeout for msm_hsic_host wakelock
c991e1d86be bcmdhd: reduce rx wakelock timeout via sysfs node
267f24c12bd power: skip sensor_ind wakeup source activation via sysfs
e0adb3c05df power: sysfs node to disable/enable smb135x wakelock
87912bbef41 hells_defconfig: Enable NEON optimizations
47808375b70 sched: LOAD_FREQ (4*HZ+61) avoids loadavg Moire. From http://ripke.com/loadavg/moire
61d62a97d8f hells_defconfig: Update
02316ea8c28 block: Disable add_random
62914ae783b block: deadline: Optimize for non-rotational
ca89d4450a7 block: row: Fix crash when adding a new field in bio struct
e7fc44b6896 block: sioplus: set fifo batch to 16 to reduce overload on eMMC and CPU.
64b7f5d773c block: sioplus Linux 3.10 compatibility update
19d83fa0246 block: scheduler: add SIOPLUS
8b21242e575 block: zen: set fifo batch to 16 to reduce overload on eMMC and CPU.
4a2ca105c96 block: zen crashing on selection fixup
9ea2316044f block: Add ZEN I/O scheduler
1918f5bfbf6 block: Set BFQ Slice Idle to 0
2a395b1698a block: Set CFQ Slice Idle Default to 0
303b57428bd cfq-iosched: fix the setting of IOPS mode on SSDs
71cbe076201 block: Make CFQ default to IOPS mode on SSDs
22cedd8d874 block: Switch from BFQ-v7r7 for 3.10 to BFQ-v7r8 for 3.10
7ad3ababc44 block, bfq: add Early Queue Merge (EQM) to BFQ-v7r7 for 3.10.8+
44da74b1c11 block: introduce the BFQ-v7r7 I/O sched for 3.10.8+
23b3e9f1bc4 block: cgroups, kconfig, build bits for BFQ-v7r7-3.10.8+
db8dc805d07 FIOPS: forward port for use on 3.10 Linux
b8979a070ae block: fiops add some trace information
cfb36da63e8 block: fiops bias sync workload
5ab7cc6fa62 block: fiops preserve vios key for deep queue depth workload
a1d15e065e5 block: fiops add ioprio support
421f307538f block: fiops sync/async scale
929857b144d block: fiops read/write request scale
050a0c0de29 block: fiops ioscheduler core
2822c1c706c battery: fastcharge update
ed11e611cf3 Nexus 6: USB fastcharge
fb5d48a11f0 wcd9320: add a simple sysfs interface that allows for headphone and mic register value customization. You're able to increase or decrease the sound gain of those two interfaces.
c4a32a3d763 Nexus 6: user voltage control
690bcad06e4 hells_defconfig: Enable FB_MSM_MDSS_KCAL_CTRL
1dc4078358b msm: mdss: kcal: Only apply updates on index 0
00a05c458c5 msm: mdss: kcal: Use PCC for negative display mode
81460f71e4c msm: mdss: KCAL: Send a pp display commit when changes are made
26e937f3e88 msm: mdss: KCAL: Do not read from picture adjustment registers
a9ab2310f5b msm: mdss: KCAL: Read values from MDP registers wherever possible
7b54062ca13 msm: mdss: KCAL: Apply default values on boot
8cd3c8ef2ba msm: mdss: KCAL: Queue changes when panel is powered off
5e1159975fb msm: mdss: KCAL: Remove MODULE_DESCRIPTION
cf8552bf568 msm: mdss: KCAL: Update Kconfig description
a425c2412de msm: mdss: KCAL: Update according to linux guidelines and checkpatch.pl
d3adcb7b551 msm: mdss: KCAL: Check panel power state before applying values
1496196ca1b msm: mdss: KCAL: Allow kcal_enable to control all post-processing features
3b280ee6a7a msm: mdss: Keep KCAL within its own source file
0ec513d00f5 msm: mdss: Add pa_v2 support to KCAL
071c0384117 msm: mdss: Replace PGC implementation with PCC for KCAL
79eaa452f07 msm: mdss: Add KCAL support for post processing control [v2]
08c48d31ea2 Makefile: HACK: Get GCC6 working
3f8873249c0 Support GCC 6.0
ac57316dd86 kernel: add support for gcc 5
f23c98d60c1 GCC 5.1 cleanup
ad81d31507e ARM: 8171/1: Use current_stack_pointer for return_address
0eb78c55635 ARM: 8158/1: LLVMLinux: use static inline in ARM ftrace.h
e63f6a6fd6b debug: remove: arm unwind: remove logspam while in debug mode
710bbf42383 shut up unwind
432463556c8 xz: Optimize Sfck Compression
dd93851e7de Fix gcc-4.9.0 miscompilation of load_balance() in scheduler
8e32e3ae605 GPU: add optimization flags to GPU drivers
60773ef6617 Add build script
486edcde60d arm: boot: compressed: Optimize for cortex a15
a6e0438ea7a hells_defconfig: Disable some debugging and unneeded stuff
6a85903d107 hells_defconfig: Make usual changes
fddb432e846 defconfig: Add hells_defconfig
37a78faeb27 usb: gadget: fix build warning
e83c99de801 arm/kernel/irq.c: remove irq affinity warnings
b3870476142 USB: gadeget: ci13xxx: Fix warning for debug usage
1780f6e5854 scripts: Do not append plus character if dirty
33a4b8c8c31 fix compilation warnings
e9ca6474d9b fix compilation warnings
9877256b9a1 Not cool to force that debugging.
e88c69e7689 IO: removed usless test & debug things
1441bed708d Makefile adjustments and clean up
dca46541739 Makefiles: Build Flags and Toolchain Path
166f73e0751 sched: Consider pi boosting in setscheduler()
5c7a615741e sched: Add 'flags' argument to sched_{set,get}attr() syscalls
94d71ad65f6 sched: Add new scheduler syscalls to support an extended scheduling parameters ABI
47694a028e1 sched: Fix some kernel-doc warnings
07b7beb857f sched: Move h_load calculation to task_h_load()
fdf242f3322 sched/idle: Avoid spurious wakeup IPIs
ee1823e6394 sched/fair: Implement fast idling of CPUs when the system is partially loaded
54c37307b85 sched/fair: Optimize find_busiest_queue()
3a5c4a81528 sched: Remove one division operation in find_busiest_queue()
619e6b6f529 sched/tg: Remove tg.load_weight
b9c4d3f25eb sched/cfs_rq: Change atomic64_t removed_load to atomic_long_t
38fe6bbc58a sched/tg: Use 'unsigned long' for load variable in task group
1bf4db46ea4 sched: Change cfs_rq load avg to unsigned long
9a02617bf7a sched: Consider runnable load average in move_tasks()
5680031c126 sched: Update cpu load after task_tick
339ee0c634c sched: patcking task to per cpu horse power in periodic balance
1d790a8c057 sched: packing task per cpu power in fork/exec/wakeup balance
6e8e948755f sched: only use instant utilization in burst wakeup balance
ae531723c03 sched: make sure select_tas_rq_fair get a cpu
671eac06095 sched: don't do power balance on share cpu power domain
7d136ca43a7 sched: lazy power balance
c392f6d36cd sched: power aware load balance
67037331c82 sched: add new members of sd_lb_stats
c6a465eb2ca sched: no balance for prefer_sibling in power scheduling
f8809eff987 sched: pull all tasks from source group
5def27ae8b9 sched: add power/performance balance allow flag
572534bb82e sched: packing transitory tasks in wakeup power balancing
5b0ca1b9a71 sched: using avg_idle to detect bursty wakeup
495d639ac28 sched: add sched_burst_threshold_ns as wakeup burst indicator
b177df7a8a7 sched: add power aware scheduling in fork/exec/wake
91d199345fa sched: get rq potential maximum utilization
301b2b4835d sched: scale_rt_power rename and meaning change
36c140f93fc sched: move sg/sd_lb_stats struct ahead
18a2a223548 sched: add new sg/sd_lb_stats fields for incoming fork/exec/wake balancing
b6a2b055c51 sched: log the cpu utilization at rq
5e09b7af660 sched: add sysfs interface for sched_balance_policy selection
2981b88bf80 sched: add sched balance policies in kernel
d939db83a4b sched: set initial value of runnable avg for new forked task
0b977c9de68 apq8084: dtsi: Disable bcl-driver
c5c9efde8ba Revert "power: max17042: Enable Empty Learning feature."
b6d36fc141b Revert "arm/dts: shamu: Enable Empty Learning feature."
510908e1130 Revert "sched: Introduce temporary FAIR_GROUP_SCHED dependency for load-tracking"
4082c54edd8 Revert "android: binder: Use wake up hint for synchronous transactions."
78904db68f9 Revert "android: binder: Disable preemption while holding the global binder lock."
a5b7676d935 Revert "android: binder: move preempt disable after mmput"

====================
     02-15-2017
====================


   * device/qcom/common/
40c6b79 extractors: Add aptX & aptXHD to confirmed platforms

   * frameworks/base/
09af08c95f2 HBM tile: remove toast and don't collapse qs panel
2a1c72174a6 HBM: Fix persistence across suspend
a95b061e8b6 Add High brightness mode QS Tile
8ecfd73f082 Add Functionality to control High Brightness Mode [1/2]
968f8395160 Update validus statusbar logo

   * hardware/qcom/bootctrl/
810a245 bootctl: use TARGET_RECOVERY_UPDATER_LIBS macro for linking

   * manifest/
293cc91 track opt/cards

   * packages/apps/Calendar/
dcbc3538 Expose moar stuff for themers

====================
     02-14-2017
====================

